{"version":3,"sources":["Components/Card.js","Components/Main.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Card","props","console","log","className","src","article","enclosure","url","width","alt","rel","target","href","link","title","parser","Parser","Main","useState","newsContainer","setNews","useEffect","a","parseURL","feed","items","fetch","undefined","naturalSlideWidth","naturalSlideHeight","step","totalSlides","length","map","index","key","App","activeClassName","exact","to","path","About","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"0SAGe,SAASA,EAAKC,GAGzB,OAFAC,QAAQC,IAAIF,GAGR,yBAAKG,UAAU,kBACX,yBAAKA,UAAU,WACX,yBAAKC,IAAKJ,EAAMK,QAAQC,UAAUC,IAAKC,MAAM,OAAOC,IAAI,SAE5D,yBAAKN,UAAU,eACX,uBAAGO,IAAI,aAAaC,OAAO,SAASC,KAAMZ,EAAMK,QAAQQ,MAAOb,EAAMK,QAAQS,S,0BCHzFC,EAAS,I,OAAIC,GAEF,SAASC,IAAQ,IAAD,EACMC,mBAAS,IADf,mBACpBC,EADoB,KACLC,EADK,KAgB3B,OAbAC,qBAAU,YAEK,uCAAG,4BAAAC,EAAA,sEAEOP,EAAOQ,SAAS,gEAFvB,OAENC,EAFM,OAGVJ,EAAQI,EAAKC,OAHH,2CAAH,qDAKXC,KAED,IAKC,yBAAKvB,UAAU,uBACQwB,IAAlBR,EACG,kBAAC,IAAD,CACIS,kBAAmB,IACnBC,mBAAoB,IACpBC,KAAM,EACNC,YAAaZ,EAAca,OAC3B7B,UAAU,gBAGV,kBAAC,IAAD,KACKgB,EAAcc,KAAI,SAAC5B,EAAS6B,GAAV,OACf,kBAAC,IAAD,CAAOA,MAAOA,EAAOC,IAAKD,GACtB,kBAAC,EAAD,CAAM7B,QAASA,SAK3B,yBAAKF,UAAU,aACX,kBAAC,IAAD,KACI,uBAAGA,UAAU,kCAEjB,kBAAC,IAAD,KACI,uBAAGA,UAAU,qCAKvB,WCxCH,SAASiC,IAEtB,OACE,kBAAC,IAAD,KACE,+BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAASC,gBAAgB,cAAcC,OAAK,EAACC,GAAG,KAAhD,SAEF,4BACE,kBAAC,IAAD,CAASF,gBAAgB,cAAcE,GAAG,UAA1C,aAQR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOD,OAAK,EAACE,KAAK,UAChB,kBAACC,EAAD,OAGF,kBAAC,IAAD,CAAOD,KAAK,KACV,kBAAC,EAAD,SAWV,SAASC,IACP,OACE,yBAAKC,MAAO,CAAElC,MAAO,SACnB,qCADF,KC1CgBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.fe8a73ac.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../Assets/Styles/Card.css'\r\n\r\nexport default function Card(props) {\r\n    console.log(props);\r\n\r\n    return (\r\n        <div className=\"card_container\">\r\n            <div className=\"img_div\">\r\n                <img src={props.article.enclosure.url} width=\"100%\" alt=\"img\" />\r\n            </div>\r\n            <div className=\"content_div\">\r\n                <a rel=\"noreferrer\" target=\"_blank\" href={props.article.link}>{props.article.title}</a>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport Card from './Card';\r\nimport '../Assets/Styles/Main.css'\r\n\r\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';\r\n// import 'pure-react-carousel/dist/react-carousel.es.css';\r\n\r\n\r\nimport Parser from 'rss-parser'\r\nlet parser = new Parser();\r\n\r\nexport default function Main() {\r\n    const [newsContainer, setNews] = useState([])\r\n    // fetch news\r\n    useEffect(() => {\r\n\r\n        const fetch = async () => {\r\n\r\n            let feed = await parser.parseURL('https://rss.aftonbladet.se/rss2/small/pages/sections/kultur/');\r\n            setNews(feed.items)\r\n        }\r\n        fetch()\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"main_Container\">\r\n            {newsContainer !== undefined ?\r\n                <CarouselProvider\r\n                    naturalSlideWidth={500}\r\n                    naturalSlideHeight={325}\r\n                    step={2}\r\n                    totalSlides={newsContainer.length}\r\n                    className=\"animateSlide\"\r\n\r\n                >\r\n                    <Slider>\r\n                        {newsContainer.map((article, index) =>\r\n                            <Slide index={index} key={index}>\r\n                                <Card article={article} />\r\n                            </Slide>\r\n                        )}\r\n                    </Slider>\r\n\r\n                    <div className=\"slide_Btn\">\r\n                        <ButtonBack>\r\n                            <i className=\"fas fa-arrow-alt-circle-left\"></i>\r\n                        </ButtonBack>\r\n                        <ButtonNext>\r\n                            <i className=\"fas fa-arrow-alt-circle-right\"></i>\r\n                        </ButtonNext>\r\n                    </div>\r\n\r\n                </CarouselProvider>\r\n                : \"Loading\"}\r\n\r\n               \r\n        </div>\r\n    )\r\n}\r\n// {newsContainer !== undefined ? newsContainer.map((article) => <Card article={article} />) : \"Loading\"}\r\n\r\n{/* <CarouselProvider\r\n                naturalSlideWidth={100}\r\n                naturalSlideHeight={125}\r\n                totalSlides={3}\r\n            >\r\n                <Slider>\r\n                    <Slide index={0}>I am the first Slide.</Slide>\r\n                    <Slide index={1}>I am the second Slide.</Slide>\r\n                    <Slide index={2}>I am the third Slide.</Slide>\r\n\r\n                </Slider>\r\n                <ButtonBack>Back</ButtonBack>\r\n                <ButtonNext>Next</ButtonNext>\r\n            </CarouselProvider> */}","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink\n} from \"react-router-dom\";\n\nimport Main from './Components/Main';\n\n\n\nexport default function App() {\n\n  return (\n    <Router>\n      <aside>\n        <nav>\n          <ul>\n            <li>\n              <NavLink activeClassName=\"activeRoute\" exact to=\"/\">Home</NavLink>\n            </li>\n            <li>\n              <NavLink activeClassName=\"activeRoute\" to=\"/about\">About</NavLink>\n            </li>\n          </ul>\n        </nav>\n      </aside>\n\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n\n        <Route path=\"/\">\n          <Main />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return (\n    <div style={{ width: \"70vw\" }}>\n      <h2>About</h2>;\n    </div>\n\n  )\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}